##############################################################
##					Mathematical Optimization				## 
## 					J.P Zaldivar & E. Millán				##
##############################################################

reset;
##############################################################
print "---------------SVM-Primal---------------";

model primal_SVM.mod;
data ./Data/test1000_11.dat;
data ./Data/train1000_13.dat;

show;
option solver cplex;


problem PRIMAL_SVM: w, gamma, s, primal_SVM, c1, c2;
solve PRIMAL_SVM;
print "---------------w values---------------" > Pred/out_p_train1000_13.txt;
display w > Pred/out_p_train1000_13.txt;
print "---------------s values---------------" > Pred/out_p_train1000_13.txt;
display s > Pred/out_p_train1000_13.txt;
print "-------------gamma value--------------" > Pred/out_p_train1000_13.txt;
display gamma > Pred/out_p_train1000_13.txt;
print "--------------------------------------" > Pred/out_p_train1000_13.txt;
display {i in 1..m} (y_train[i], sum {j in 1..n} w[j] * A_train[i,j] + gamma) > Pred/out_p_train1000_13.txt;

##############################################################
##############################################################
reset;
##############################################################
##############################################################

print "---------------SVM-Dual---------------";

model dual_SVM.mod;
data ./Data/test1000_11.dat;
data ./Data/train1000_13.dat;

show;
option solver cplex;


problem DUAL_SVM: la, dual_SVM, c1;
solve DUAL_SVM;
print "-------------lambda value--------------" > Pred/out_d_train1000_13.txt;
display la > Pred/out_d_train1000_13.txt;
print "---------------w values---------------" > Pred/out_d_train1000_13.txt;
param w {1..n};
let {j in 1..n} w[j] := sum{i in {1..m}} la[i] * y_train[i] * A_train[i,j];
display w > Pred/out_d_train1000_13.txt;

##############################################################
##############################################################
