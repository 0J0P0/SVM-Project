##############################################################
##					Mathematical Optimization				## 
## 					J.P Zaldivar & E. Millán				##
##############################################################

reset;
print "---------------SVM-Primal---------------";

model primal_SVM.mod;
data ./Data/X_test.dat;
data ./Data/X_train.dat;

show;
option solver cplex; 


problem PRIMAL_SVM: w, gamma, s, primal_SVM, c1, c2;
solve PRIMAL_SVM;

display w > Pred/out_p_X_train.txt;

display gamma > Pred/out_p_X_train.txt;

param y_pred {1..m_test};
let {i in {1..m_test}} y_pred[i] := sum{j in 1..n} w[j] * A_test[i,j] + gamma;
let {i in {1..m_test}} y_pred[i] := if y_pred[i] <= 0 then -1 else 1;
display y_pred  > Pred/out_p_X_train.txt;

param acc default 0;
for {i in {1..m_test}} {
	if y_pred[i] == y_test[i] then
		let acc := acc + 1;
}
display acc / m_test *100 > Pred/out_p_X_train.txt;

display s > Pred/out_p_X_train.txt;

##############################################################

reset;
print "---------------SVM-Dual---------------";

model dual_SVM.mod;
data ./Data/X_train.dat;
data ./Data/X_test.dat;

show;
option solver cplex;


problem DUAL_SVM: la, dual_SVM, c1;
solve DUAL_SVM;

param w {1..n};
let {j in 1..n} w[j] := sum{i in 1..m_train} la[i] * y_train[i] * A_train[i,j];
display w > Pred/out_d_X_train.txt;

param gamma;
param i default 1;
param found default 0;
repeat while (i <= m_train && !found) {
	if (la[i] > 1e-4 && la[i] < nu - 1e-8) then
		let found := 1;
	else
		let i := i + 1;
}
let gamma := 1/y_train[i] - sum {j in 1..n} A_train[i,j] * w[j];
display gamma > Pred/out_d_X_train.txt;

param y_pred {1..m_test};
let {t in {1..m_test}} y_pred[t] := sum{j in 1..n} w[j] * A_test[t,j] + gamma;
let {t in {1..m_test}} y_pred[t] := if y_pred[t] <= 0 then -1 else 1;
display y_pred  > Pred/out_d_X_train.txt;

param acc default 0;
for {t in {1..m_test}} {
	if y_pred[t] == y_test[t] then
		let acc := acc + 1;
}
display acc / m_test *100 > Pred/out_d_X_train.txt;

display la > Pred/out_d_X_train.txt;

##############################################################

reset;
print "--------------SVM-Dual-Kernel--------------";

model dual_SVM.mod;
data ./Data/X_train.dat;
data ./Data/X_test.dat;

show;
option solver cplex;


problem DUAL_SVM_KERNEL: la, dual_SVM_kernel, c1_kernel;
solve DUAL_SVM_KERNEL;

/*
param w {1..n};
let {j in 1..n} w[j] := sum{i in 1..m_train} la[i] * y_train[i] * A_train[i,j];
display w > Pred/out_d_X_train.txt;
*/

param gamma;
param i default 1;
param found default 0;
repeat while (i <= m_train && !found) {
	if (la[i] > 1e-4 && la[i] < nu - 1e-8) then
		let found := 1;
	else
		let i := i + 1;
}
let gamma := 1/y_train[i] - sum {j in 1..n} la[j] * y_train[j] * exp(-(1/n * (sum{k in 1..n} (A_train[i,k] - A_train[j,k])^2)));
display gamma > Pred/out_dk_X_train.txt;

param y_pred {1..m_test};
# ??? y_test
let {t in 1..m_test} y_pred[t] := sum {j in 1..m_test} la[j] * y_test[j] * exp(-(1/n * (sum{k in 1..n} (A_test[t,k] - A_test[j,k])^2))) + gamma;
let {t in 1..m_test} y_pred[t] := if y_pred[t] <= 0 then -1 else 1;
display y_pred  > Pred/out_dk_X_train.txt;

param acc default 0;
for {t in {1..m_test}} {
	if y_pred[t] == y_test[t] then
		let acc := acc + 1;
}
display acc / m_test *100 > Pred/out_dk_X_train.txt;

display la > Pred/out_dk_X_train.txt;
